#!/usr/bin/env perl
use 5.012;
use warnings;

use Mojolicious::Lite;
use Mojolicious::Session;
use Mojo::ByteStream 'b';
use lib 'lib';
use lib '../lib';
use Quelology::Config qw(schema config);
use Carp qw(confess);
use List::MoreUtils qw/uniq/;
use Digest::SHA1 qw/sha1/;
use utf8;

my $schema = schema;

sub trim {
    my $s = $_[0];
    $s =~ s/\A\s+//;
    $s =~ s/\s+\z//;
    $s;
}

sub clean_session {
    my $self = shift;
    my %seen;
    return unless $self->session->{shelf_ids};
    my @new;
    for (@{$self->session->{shelf_ids}}) {
        next if $seen{$_};
        my $node = $schema->m->by_id($_);
        next if $seen{$node->root_id};
        push @new, $node->root_id;
        $seen{$node->root_id} = 1;
    }
    $self->session->{shelf_ids} = \@new;
}

app->secret( config('web_secret') );
app->types->type(html => 'text/html; charset=utf-8');

app->helper(shelf => sub {
    my $self = shift;
    my @items = @{ $self->session->{shelf_ids} // [] };
    return b($self->render(
        items   => [map($schema->m->by_id($_), @items)],
        partial => 1,
        template => 'small-shelf',
    ));
});

get '/' =>  sub {
    my $self = shift;
    my $t = '';
    $self->render(
        threads     => [$schema->m->threads],
        singles     => [$schema->m->singles],
        template    => 'index',
        title       => 'Quelology - Semantic Relations Between Books',
    );
} => 'index';

sub title_for {
    my $node = shift;
    my $title = sprintf '%s "%s" by %s',
                        (shift // ($node->is_leaf ? "Details for" : "Quelology for")),
                        $node->title,
                        $node->made_by;
}

get '/m/:id' => sub {
    my $self = shift;
    my $node = $schema->m->by_id($self->param('id'));
    my $template = $node->is_leaf ? 'medium' : 'tree';
    $self->render(
        layout  => 'basic',
        title   => title_for($node),
        node    => $node,
        template => $template,
    );
} => 'medium';

get '/details/:id' => sub {
    my $self = shift;
    my $node = $schema->m->by_id($self->param('id'));
    $self->render(
        layout  => 'basic',
        title   => title_for($node),
        node    => $node,
        template => 'medium',
    );
} => 'details';

get '/asin/:asin' => sub {
    my $self = shift;
    my $node = eval {
        $schema->m->from_asin($self->param('asin'));
    };
    if ($node) {
        $self->render(
            template => 'medium',
            title    => title_for($node),
            node     => $node,
            layout   => 'basic',
        );
    } else {
        $self->render(status => 404, text => 'Book not found');
    }

} => 'asin';

get '/t/:id' => sub {
    my $self = shift;
    my $node = $schema->m->by_id($self->param('id'));
    $self->render(
        layout  => 'basic',
        title   => title_for($node),
        node    => $node,
    );
} => 'tree';

sub search {
    my $self = shift;
    my $keyword = trim $self->param('keyword');
    my $res = Quelology::Config::amazon->search(
                    keywords => $keyword,
                    type     => 'Books',
               );
    my ($series, $media) = $schema->m->websearch($keyword);
    $self->render(
        layout   => 'basic',
        title    => "Search results for '$keyword'",
        template => 'search',
        series   => $series,
        media    => $media,
    );

}

get '/logout/' => sub {
    my $self = shift;
    delete $self->session->{logged_in};
    delete $self->session->{user};
    $self->flash(message => 'Logout successful');
    $self->redirect_to('/');
};

my @captcha_qa = qw/one|1 four|2 nine|3 sixteen|4 twenty-five|5 thirty-six|6/;

sub create_captcha {
    my $self = shift;
    my $ca = $captcha_qa[rand @captcha_qa];
    my ($q, $a) = split /\|/, $ca;
    $self->stash(captcha => "What's the square root of $q?");
    $self->session->{captcha_answer} = sha1($a . $self->app->secret);
}

sub captcha_correct {
    my $self = shift;
    my $a    = $self->param('captcha');
    $a =~ s/\D//g;
    unless ($a) {
        $self->app->log->debug('No captcha answer found');
        return;
    }
    my $expected = $self->session->{captcha_answer};
    unless ($expected) {
        $self->app->log->debug('No captcha session answer found');
        return;
    }
    if (sha1($a . $self->app->secret) eq $expected) {
        return 1;
    }
    $self->app->log->debug('captcha mismatch');
    return;
}

post '/signup' => sub {
    my $self = shift;
    my $error = sub {
        $self->flash(message => shift);
        $self->redirect_to('/login/');
        return;
    };

    my @missing;
    my %p;
    for (qw/username password password_confirm captcha/) {
        push @missing, $_ unless $self->param($_);
        $p{$_} = $self->param($_);
    }
    if ($p{username}) {
        my ($existing) = $schema->resultset('UserLogin')->search({
                name    => $p{username},
        });
        return $error->("Username '$p{username}' already taken")
            if $existing;
    }
    return $error->('Missing ' . join(', ', @missing)) if @missing;
    return $error->('Password and password confirmation do not match')
        if $p{password} ne $p{password_confirm};
    return $error->('Password too simple') if length($p{password}) < 6;
    return $error->('Spam suspected') if length $p{email};
    return $error->('Captcha incorrect (please write your answer as digit(s))')
        unless captcha_correct($self);

    # wow, finally success!
    delete $self->session->{captcha_answer};
    my $u = $schema->resultset('UserLogin')->create({
            name        => $p{username},
            password    => $p{password},
    });
    if (my $email = $self->param('email')) {
        $u->create_related(info => {
                email   => $email,
        });
    }

    $self->session->{logged_in} = 1;
    $self->session->{user} = $p{username};
    $self->flash(message => 'Account created successfully, welcome to the Quelology!');

    my $goto = delete $self->session->{goto_after_login} // '/';
    $self->redirect_to($goto);

} => 'signup';

post '/login/' => sub {
    my $self     = shift;
    my $username = $self->param('username');
    my $password = $self->param('password');
    my $u        = $schema->resultset('UserLogin')
                   ->authenticate($username, $password);
    if ($u) {
        $self->session(expiration => 4 * 60 * 60);
        $self->session->{logged_in} = 1;
        $self->session->{user}      = $u->name;
        $self->flash(message => 'Login successful, welcome!');
        my $goto = delete $self->session->{goto_after_login} // '/';
        $self->redirect_to($goto);
    } else {
        $self->flash(message => 'Login failed, please try again');
        $self->redirect_to('/login/');
    }
};

get '/imprint' => sub {
    my $self = shift;
    $self->render(
        template => 'imprint',
        title    => 'Legal Details for Quelology',
        layout   => 'basic',
    );
};

get '/about' => sub {
    my $self = shift;
    $self->render(
        template => 'about',
        title    => 'About quelology.org',
        layout   => 'basic',
    );
};


get  '/search/:keyword' => \&search => 'search';
post '/search/'         => \&search;

get '/login/' => sub {
    my $self = shift;
    if ($self->session('logged_in')) {
        $self->flash(message => 'You are already logged in.');
        $self->redirect_to('/');
    } else {
        create_captcha($self);
        $self->render(
            template => 'login',
            title    => 'Log in to the Quelology',
            layout   => 'basic',
        );
    }
};

sub render_shelf {
    my $self = shift;
    $self->render(template => 'just-shelf');
}

post '/shelf/delete'=> sub {
    my $self = shift;
    $self->session->{shelf_ids} = [];
    render_shelf($self);
};

post '/shelf/add' => sub {
    my $self = shift;
    unshift @{$self->session->{shelf_ids}}, $self->param('id');
    clean_session($self);
    render_shelf($self);
} => 'shelf/add';

get '/shelf/small' => sub {
    my $self = shift;
    render_shelf($self);
} => 'shelf';

get '/die' => sub { die 'DEBUG'; };


under sub {
    my $self = shift;
    return 1 if $self->session->{logged_in};
    use Data::Dumper;
    if (!exists $self->session->{goto_after_login}
            && $self->req->url !~ /\blog(in|out)\b/) {
        $self->app->log->debug('Setting goto_after_login to "' . $self->req->url . '"');
        $self->session->{goto_after_login} = "" . $self->req->url;
    }
    create_captcha($self);
    $self->render(
        message => 'You need to login (or create an account) for this operation',
        template    => 'login',
        title       => 'Permissions denied - please log in',
        layout      => 'basic',
        status      => 403,
    );
    return;
};

get '/edit/:id' => sub {
    my $self = shift;
    my $root = $schema->m ->by_id($self->param('id'));
    $self->render(
        template => 'edit',
        nodes    => [$root->thread_with_drop_points],
        title    => title_for($root, 'Edit'),
        layout   => 'basic',
    );
} => 'edit';

post '/lump/' => sub {
    my $self = shift;
    my @nodes;
    for ($self->param) {
        next unless /^\d+$/;
        push @nodes, $schema->m->by_id($_);
    }
    if (@nodes < 2) {
        $self->flash(message => "Grouping less than two nodes is a no-op");
        $self->redirect_to('/');
        return;
    }
    @nodes = sort { ($a->publish_year // 0) <=> ($b->publish_year // 0) } @nodes;

    my $new_thread = $schema->m->create_root_with_children(
        { title => '<unnamed>' },
        @nodes,
    );
    $self->flash(message => 'Please change the title of the new series, and check the order of items');
    unshift @{$self->session->{shelf_ids}}, $new_thread->id;
    clean_session($self);
    $self->redirect_to('/shelf/connect');
};


post '/update/:what' => sub {
    my $self = shift;
    my $what = $self->param('what');
    my %allowed = (title => 1, made_by => 1);
    die "Can't change '$what'" unless $allowed{$what};
    die "empty $what" unless $self->param($what);
    my $node = $schema->m->by_id($self->param('id'));
    $node->update({$what => trim $self->param($what)});
    # TODO: return some JSON or HTML or so...
    $self->render(
        template    => 'small_medium',
        n           => $node,
        edit        => 1,
    );
};

post '/recompute/:what' => sub {
    my $self = shift;
    my $what = $self->param('what');
    my %allowed = (publisher => 1, made_by => 1);
    die "Can't change '$what'" unless $allowed{$what};
    my $id = $self->param('id');
    my $node = $schema->m->by_id($id);
    $node->update({ $what => $node->children->calc_property($what)});
    $self->render(
        template    => 'small_medium',
        n           => $node,
        edit        => 1,
    );
};

post '/create' => sub {
    my $self = shift;
    for (qw/id where/) {
        die "$_ not provided" unless $self->param($_);
    }
    my %d;
    for (qw/title made_by/) {
        $d{$_} = trim $self->param($_);
    }
    die "No title provided" unless length $d{title};
    my $target = $schema->m->by_id($self->param('id'));
    given ($self->param('where')) {
        when ('before') { $target->create_left_sibling(\%d)  }
        when ('after' ) { $target->create_right_sibling(\%d) }
        when ('below' ) {
            $target->attach_leftmost_child(
                $schema->m->create(\%d)
            );
        }
        default { die "Don't know how to attach in position '$_'" }
    }
    $self->render(
        template => 'edit',
        nodes    => [$target->root->thread_with_drop_points],
    );
};

post '/delete' => sub {
    my $self = shift;
    my $node = $schema->m->by_id($self->param('id'));
    my $root = $node->root;
    $node->take_cutting;
    $self->render(
        template => 'edit',
        nodes    => [$root->thread_with_drop_points],
    );
};

post '/dissolve' => sub {
    my $self = shift;
    my $node = $schema->m->by_id($self->param('id'));
    $node->dissolve();
    $self->render(text => '');
};


$SIG{INT} = sub {
    $schema->storage->disconnect;
    exec $^X, $0, @ARGV;
};

get '/shelf/connect' => sub {
    my $self = shift;
    my %seen;
    my @nodes;
    for my $id (@{ $self->session->{shelf_ids} // [] }) {
        next if $seen{$id};
        push @nodes, [];
        for ($schema->m->by_id($id)->thread_with_drop_points) {
            if (ref($_) eq 'ARRAY') {
                ++$seen{$_->[0]->id};
            }
            push @{$nodes[-1]}, $_;
        }
    }
    $self->render(
        template => 'shelf/connect',
        title    => 'Personal Bookshelf - extend the Quelology',
        nodes    => \@nodes,
    );
};

post '/edit' => sub {
    my $self = shift;
    my ($source_id, $target_id, $where)
            = map $self->param($_), qw/source_id target_id edit_where/;
    my $target = $schema->m->find($target_id);
    die "No target with id $target_id" unless $target;
    my $source = $schema->m->find($source_id);
    die "No source with id $source_id" unless $source;

#    warn "Moving $source_id $where $target_id\n";

    my $where_to_go = $target;
    push @{$self->session->{shelf_ids}}, $target_id;

    if ( $target->is_root && $where ne 'below' ) {
        my @children = $target;
        if ($where eq 'before') {
            unshift @children, $source;
        }
        elsif ($where eq 'after') {
            push @children, $source;
        } else {
            die "Don't know what to do with position '$where' (allowed: before, after, below)";
        }
        $where_to_go = $schema->m->create_root_with_children(
            { title => '<unnamed>' },
            @children,
        );
        unshift @{$self->session->{shelf_ids}}, $where_to_go->id;
        clean_session($self);
    }
    elsif ( $where eq 'after' ) {
        $target->attach_right_sibling($source);
        # remove $source from session
    }
    elsif ( $where eq 'before' ) {
        $target->attach_left_sibling($source);
        # remove $source from session
    }
    elsif ( $where eq 'below' ) {
        $target->attach_leftmost_child($source);
        # remove $source from session
    }
    else {
        die "Don't know what to do with position '$where' (allowed: before, after, below)";
    }
    clean_session($self);
    $self->redirect_to('/shelf/connect');
};

app->start unless caller;
$schema->storage->disconnect;
1;

__DATA__

@@ index.html.ep
% layout 'basic';
<h1><%= $title %></h1>
<p>Want to find a sequel or prequel to a book? Here is the right place!</p>

<p><a href="/about">Learn more about quelology.org</a></p>
<h2>List of Series</h2>
<ul>
<% for my $n (@$threads) { %>
    <li>
    %== include small_medium_noimg => n => $n
    </li>
<% } %>
</ul>
<h2>List of single nodes</h2>
<ul>
<% for my $n (@$singles) { %>
    <li>
    <%== include small_medium_noimg => n => $n %>
    </li>
<% } %>
</ul>

@@ add_shelf_link.html.ep
<span class="add_to_shelf"><a href="#" onclick="add_id_to_shelf(<%= $node->id %>); return false">Add to personal book shelf</a></span>

@@ shelf/connect.html.ep
% layout 'basic';
<h1>Personal Book Shelf - Contribute to the Quelology</h1>
<p>Use drag and drop!</p>
% for my $n (@$nodes) {
    % my $first_node = $n->[1][0];
    <h2 id="title_<%= $first_node->id %>"><%= $first_node->title %></h2>
    <p>by <strong><%= $first_node->made_by; %></strong></p>
    <%== include 'drop_tree', nodes => $n %>
% }

@@ attribution_link.html.ep
% if ($a ->url) {
    <a href="<%= $a->url %>" class="attribution"><%= $a->name %></a>
% } else {
    <%= $a->name %>
% }

@@ attributions.html.ep
% my $a = $for->attributions;
% my $c = $a->count;
% if ($c) {
    <p class="attribution">Book or series data kindly provided by
    % if ($c == 1) {
        %== include 'attribution_link', a => $a->first
        </p>
    % } else {
        </p>
        <ul class="attribution">
        % while (my $i = $a->next) {
            <li><%== include 'attribution_link', a => $i %></li>
        %}
        </ul>
    % }
% }

@@ tree.html.ep
% layout 'basic';
<h1 class="medium"><%= $node->title %></h1>
<p>by <strong><%= $node->made_by; %></strong>, published by <strong><%= $node->publisher; %></strong>.</p>
<p><a href="/edit/<%= $node->id %>">Edit this series</a></p>
% if ($node->id != $node->root_id) {
    <p>This is part of a <a href="/t/<%= $node->root_id %>">Bigger series
    (<%= $node->title %>)</a></p>
% }
%== include add_shelf_link => (node => $node)
%== include 'tree-part', node => $node

@@ tree-part.html.ep
%= include 'small_medium', n => $node
<ul>
<% my $prev_level = 1;
   for my $n ($node->descendants) {
      my $l = $n->level - $prev_level;
      $prev_level = $n->level;
      my $ld = '';
      if ($l > 0) {
        $ld = '<ul>' x $l;
      } elsif ($l < 0) {
        $ld = '</ul>' x abs($l);
      }
    %>
        <%== $ld =%>
    <li>
        <%= include 'small_medium', n => $n =%>
    </li>
<% } =%>
<%== '</ul>' x $prev_level =%>

@@ edit_form.html.ep
<form id="edit_form" name="edit_form" method="post" action="/edit">
    <input type="hidden" id="source_id" name="source_id">
    <input type="hidden" id="target_id" name="target_id">
    <input type="hidden" id="edit_where" name="edit_where">
</form>

@@ edit.html.ep
<%
    my $first_node = $nodes->[1][0];
%>
<div class="whole_tree" data-id="<%= $first_node->id %>">
  <h1 class="root_title" id="title_<%= $first_node->id %>"><%= $first_node->title %></h1>
  <p>by <strong class="root_made_by"><%= $first_node->made_by; %></strong>,
  published by <span class="root_publisher"><%= $first_node->publisher; %></span>.
  <a href="#" onclick="dissolve_tree(<%= $first_node->id %>); false">
    <img src="/image/dissolve.png" alt="" width="16" height="16" />
    Dissolve this series
  </a>
  </p>
  <%== include 'drop_tree', nodes => $nodes %>
</div>

@@ drop_tree.html.ep
<ul>
<%
    my $prev_level = 1;
    for my $n (@$nodes) {
        my $current_level;
        if (UNIVERSAL::isa($n, 'Quelology::Model::DropPoint')) {
            $current_level =  $n->level;
        } else {
            $current_level = $n->[0]->level;
        }
        my $l = $current_level - $prev_level;
        my $ld = '';
        if ($l > 0) {
            $ld = '<ul>' x $l;
        } elsif ($l < 0) {
            $ld = '</ul>' x abs($l);
        }
    %>
        %== $ld
   <li>
        <% if (UNIVERSAL::isa($n, 'Quelology::Model::DropPoint')) { %>
            <%= include 'drop_point', d => $n =%>
        <% } else { %>
            <%= include 'small_medium', n => $n->[0], edit => 1 =%>
            <% if ($n->[1]) { %>
                <%= include 'drop_point', d => $n->[1] =%>
            <% } %>
        <% } %>
    </li>
%   $prev_level = $current_level;
% }
%== '</ul>' x $prev_level;

@@ medium.html.ep
<div class="node draggable" id="medium_<%= $node->id %>" data-id="<%= $node->id %>">
<h2><%= $node->title %></h2>
<% if (defined $node->made_by) { %>
    <p>Author: <%= $node->made_by %></p>
<% } %>
<% if ($node->id != $node->root_id) { %>
    <p>This is part of a <a href="/t/<%= $node->root_id %>">bigger series
    (<%= $node->title %>)</a></p>
<% } %>
%== include add_shelf_link => (node => $node)
<p>
    <% if (defined $node->medium_image) { %>
        <% if (defined $node->large_image) { %>
            <a href="<%= $node->large_image %>">
            <% } %>
                <img src="<%= $node->medium_image %>"
                    alt="Cover of <%= $node->title %>" />
            <% if (defined $node->large_image) { %>
                </a>
            <% } %>
        <% } %>
        <br />
        <a href="<%= $node->amazon_url %>">
            View on amazon US
        </a>
    </p>
    % my $t = $node->translations;
    % if ($t->count) {
    <div class="translations">
        <h3>Translations</h3>
        <ul>
            % while (my $n = $t->next) {
                <li>
                    <span class="language"><%= $n->language %></span>
                    <a href="/m/<%= $n->id %>"><%= $n->title %></a>
                </li>
            % }
        </ul>
    </div>
    % }

    %== include 'attributions', for => $node
</div>

@@ small_medium_noimg.html.ep
<span id="medium_<%= $n->id %>" class="medium" data-id="<%= $n->id %>">
    <span class="data_title">
    <a href="/m/<%= $n->id %>"><%= $n->title %></a>
    </span>
    by
    <span class="data_made_by">
        <%= $n->made_by %>
    </span>
    (id <%= $n->id %>)
</span>

@@ small_medium.html.ep
% my $tree_position = $n->is_root ? 'root' : $n->is_leaf ? 'leaf' : 'middle';
<span id="medium_<%= $n->id %>" class="medium" data-treeposition="<%= $tree_position %>"
    data-id="<%= $n->id %>">
    <% if ($n->small_image) { %>
        <img src="<%= $n->small_image %>" alt="" />
    <% } %>

    <span class="data_title">
    <a href="/details/<%= $n->id %>"><%= $n->title %></a>
    %== include 'edit_marker' => edit => stash('edit'), what => 'title', name => 'title'
    </span>
    by
    <span class="data_made_by">
        <%= $n->made_by %>
        %== include 'edit_marker' => edit => stash('edit'), what => 'made_by', name => 'author'
        % if (stash('edit') && $n->has_leaves) {
            <a href="#" onclick="recompute_medium('made_by', <%= $n->id %>); return false">
                <img src="/image/recompute.png" width="16" height="16"
                    alt="recompute author" title="recompute author" />
            </a>
        %}
    </span>
    (id <%= $n->id %>)
    %== include  'delete_marker', edit => stash('edit')
</span>

@@ edit_marker.html.ep
<% if (stash 'edit') { %>
    <a href="#" onclick="update_medium(<%= $n->id %>, '<%= $what %>'); return false">
        <img src="/image/edit.png" alt="(edit <%= $name %>)" title="edit <%= $name %>"
            width="16" height="16" />
    </a>
<% } %>

@@ delete_marker.html.ep
% if (stash 'edit') {
   <a href="#" onclick="delete_medium(<%= $n->id %>); return false">
       <img src="/image/delete.png" alt="remove from series"
            title="remove from series" width="16" height="16" />
   </a>
% }

@@ drop_point.html.ep
<a href="#" onclick="create_medium(<%= $d->id %>, '<%= $d->where %>'); return false">
<img
    src="/image/drop-target-small.png" width="16" height="16"
    id="drop_<%= $d->where %>_<%= $d->id %>" class="drop droppable"
    data-id="<%= $d->id %>" data-where="<%= $d->where %>"
    alt="Drag a book with your mouse and drop it here to insert it here; click here to create a new book or series in this position"
/>
</a>

@@ just-shelf.html.ep
%== shelf

@@ small-shelf.html.ep
<div id="shelf">
    % if (@$items) {
        <ul>
    %   for my $i (@$items) {
            <li class="draggable" id="shelfmedium_<%= $i->id %>" data-id="<%= $i->id %>">
            <a href="/m/<%= $i->id%>" title="<%= $i->title %>"><%= $i->short_title %></a>
            </li>
    %   }
        </ul>
    % } else {
        <p id="placeholder">Personal book shelf - drag books here.</p>
    %}
    <a href="/shelf/connect">Connect books on your shelf</a>
    <a href="#" onclick="clear_shelf()" style="clear: left">Clear bookshelf</a>
</div>

@@ search.html.ep
% if (@$series) {
    <h2>Series</h2>
    <ul>
        % for (@$series) {
            <li>
                %== include 'tree-part', node => $_
            </li>
        % }
    </ul>
% }
% if (@$media) {
    <h2>Single Books</h2>
    <form action="/lump/" method="post">
    <ul>
        % for (@$media) {
            <li>
                % if (session 'logged_in') {
                    <input type="checkbox" name="<%= $_->id %>" />
                % }
                <%= include small_medium  => (n => $_, edit => 0) %>
                <%= include 'add_shelf_link', node => $_ =%>
            </li>
        % }
    </ul>
    % if (session 'logged_in') {
        <input type="submit" value="Group together" />
    % }
    </form>
% }
% if (!@$series && !@$media) {
    <p>No search results, please try it with different search terms.</p>
% }

@@ login.html.ep
<form action="/login/" method="post">
<dl>
    <dt>Username</dt>
    <dd><input name="username" /></dd>
    <dt>Password</dt>
    <dd><input name="password" type="password"  /></dd>
    <dt></dt>
    <dl><input type="submit" value="Log in" />
</dl>
</form>

<h2>Or create a new account</h2>
<p>It's free of charge. We won't give your data to any third party.
Your password will only be stored in
<a href="http://en.wikipedia.org/wiki/Crypt_%28Unix%29#Blowfish-based_scheme">a
secure, hashed form</a>, but it will be transmitted in plain text for now.</p>
<p>We do our best to treat our users well. That said, your account does not come
with a gurantuee of continued existence, availability or fitness for any purpose.</p>

<form action="/signup" method="post">
<dl>
    <dt>Username</dt>
    <dd><input name="username" /></dd>
    <dt>Password</dt>
    <dd><input name="password" type="password"  /></dd>
    <dt>Confirm password (at least 6 characters)</dt>
    <dd><input name="password_confirm" type="password"  /></dd>
    <dt>Email (optional; if left out, you will have no chance to recover your password if you forget it)</dt>
    <dd><input name="real_email" /></dd>
    <dt><a href="http://en.wikipedia.org/wiki/CAPTCHA">Humanism verificiation</a>: <%= $captcha %></dt>
    <dd><input name="captcha" /></dd>
    <dt class="showmenot">Please leave the following field blank (spam protection)</dt>
    <dd class="showmenot"><input name="email" /></dd>
    <dd><input type="submit" value="Create account" /></dd>
</dl>
</form>


@@ about.html.ep
<h1>About quelology.org</h1>
<p>The idea of quelology.org is to gather semantic data about book relations,
and make it easily available to everybody who is interested in it.</p>
<p>For now we store which books form a common sequel. Hence the name:
<strong>Quel</strong>ology is the science of whether a book is a
se<strong>quel</strong> or pre<strong>quel</strong>.</p>

<h2>Planned features</h2>
<p>In future we wawnt to store more relations between books:</p>
<ul>
    <li>What translations exist, what's the original language?
        Who translated it?</li>
    <li>Which language(s) is the book written in?</li>
    <li>Which editions of the same book exist?</li>
</ul>

<h2>Project details, feedback</h2>

<p>The Quelology is a project by <a href="http://perlgeek.de/">Moritz Lenz</a>.</p>
<p>The source code is available on
<a href="https://github.com/moritz/quelology/">github</a>.</p>
<p>If you have any suggestions, bug reports, encouragements or even want to contribute, please send an email to <em>moritz at faui2k3 dot org</em>, including the moniker <code>[quelology]</code> in the subject.</p>


@@ imprint.html.ep
<h1>Legal Details</h1>
<p>Responsible for this site in general is</p>
<p>
Moritz Lenz <br />
Sperlingstr. 2 <br />
91056 Erlange <br />
Germany
</p>
<p>Please note that much of the content is user-generated,
and belongs to whoever generated it. Each author is
responsible for whatever he writes.</p>

@@ layouts/basic.html.ep
<!doctype html><html>
    <head>
        <title><%= $title %></title>
        <style type="text/css"><!--
            body {
                padding: 0px;
                margin: 0px;
                height: 100%;
            }
            a img {
                border: none;
            }
            .shelf-droppable, #footer {
                background-color: #FFFF66;
            }
            #header {
                padding: 0.5em;
                margin: 0px;
                min-height: 2em;
            }
            #left-column {
                position: absolute;
                width: 2em;
                height: 100%;
            }
            #content {
                margin: 1em;
                margin-left: 3em;
            }
            #footer {
                padding: 0.3em;
                margin-left: 2em;
            }
            .flash {
                font-weight: bold;
                color: red;
            }
            .node {
                border: 1px dotted black;
                padding: 0.3em;
                max-width: 20em;
                margin: none;
            }
            .data_made_by {
                font-weight: bold;
            }
            #shelf {
                padding: 0.1em;
            }
            #shelf li {
                float: left;
                list-style-type: none;
                padding: 1ex;
            }
            .showmenot {
                display: none;
            }
  // --></style>
    <link rel="shortcut icon" href="/favicon.ico">
    <script type="text/javascript" src="/js/jquery-1.4.3.min.js"></script>
    <script type="text/javascript" src="/js/jquery-ui-1.8.6.custom.min.js"></script>
    <script type="text/javascript" src="/js/custom.js"></script>
    </head>
    <body>
        <%== include 'edit_form' %>
        <div id="header" class="shelf-droppable droppable">
            <p style="display: inline;"><a href="/">Home</a>
            % if (session 'logged_in') {
                Logged in as '<%= session 'user' %>'.
                <a href="/logout/">Logout</a>.
            % } else {
                <a href="/login/">Log in</a>.
            % }
            </p>
            <form action="/search/" method="post">
            <p style="float:right"><input type="text" id="keyword" name="keyword" />
               <input type="submit" value="search" />
            </p>
            </form>
            <%== shelf %>
        </div>
        <div id="left-column" class="shelf-droppable droppable">
        </div>
        <div id="content">
            % if (flash 'message' || stash 'message') {
                <p class="flash"><%= flash('message') // stash('message') %></p>
            % }
            <%== content %>
        </div>
    <div id="footer">
        <a href="/imprint">Legal Details</a>
    </div>
    </body>
</html>
