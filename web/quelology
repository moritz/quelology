#!/usr/bin/env perl

use lib 'lib';
use if $ENV{QUELOLOGY_HOME}, 'lib', "$ENV{QUELOLOGY_HOME}/lib";
use 5.012;
use Mojolicious::Lite;
use Mojo::ByteStream 'b';
use Quelology::Config qw(schema config run_mode);
use Carp qw(confess);
use List::MoreUtils qw/uniq/;
use Digest::SHA1 qw/sha1/;
use Locales;
use utf8;
use warnings;


my $schema = schema;

app->sessions->default_expiration(60 * 60 * 24);

sub trim {
    my $s = $_[0];
    $s =~ s/\A\s+//;
    $s =~ s/\s+\z//;
    $s;
}

sub clean_session {
    my $self = shift;
    my %seen;
    return unless $self->session->{shelf_ids};
    my @new;
    for (@{$self->session->{shelf_ids}}) {
        next if $seen{$_};
        my $node = $schema->t->by_id($_);
        next if $seen{$node->root_id};
        push @new, $node->root_id;
        $seen{$node->root_id} = 1;
    }
    $self->session->{shelf_ids} = \@new;
}

app->secret( config('web_secret') );
app->types->type(html => 'text/html; charset=utf-8');

app->helper(shelf => sub {
    my $self = shift;
    my @items = @{ $self->session->{shelf_ids} // [] };
    return b($self->render(
        items   => [map($schema->t->by_id($_), @items)],
        partial => 1,
        template => 'small-shelf',
    ));
});

app->helper(extract_nodes => sub {
    my ($self, $n) = @_;;
    my @r;
    my $t;
    $t = sub {
        my $s = shift;
        if (ref($s) eq 'ARRAY') {
            for my $thing (@$s) {
                $t->($thing);
            }
        } elsif ($s->isa('Quelology::Model::Result::Title')) {
            push @r, $s;
        } else {
        }
    };
    $t->($n);
    return @r;
});

get '/' =>  sub {
    my $self = shift;
    my $t = '';
    $self->render(
        threads     => [$schema->t->threads->search(undef, {rows => 20, order_by => \'random()'})],
        singles     => [$schema->t->singles->search(undef, {rows => 10, order_by => \'random()'})],
        template    => 'index',
        title       => 'Quelology - Semantic Relations Between Books',
        langs       => [$schema->t->langs],
    );
} => 'index';

get '/robots.txt' => sub {
    my $self = shift;
    my $template = (run_mode() =~ /^prod/) ? 'robotstxt_prod' : 'robotstxt_dev';
    $self->render(
        template    => $template,
    );
};

sub title_for {
    my $node = shift;
    my $title = sprintf '%s "%s"',
                    (shift // ($node->is_leaf ? "Details for" : "Quelology for")),
                    $node->title;
}

get '/t/:id' => [ id => qr/[0-9]+/ ] => sub {
    my $self = shift;
    my $node = $schema->t->by_id($self->param('id'));
    my $template = $node->is_leaf ? 'title' : 'tree';
    $self->render(
        layout  => 'basic',
        title   => title_for($node),
        node    => $node,
        template => $template,
    );
} => 'title';

get '/title/:id/' => [ id => qr/[0-9]+/ ] => sub {
    my $self = shift;
    my $node = $schema->t->by_id($self->param('id'));
    $self->render(
        layout  => 'basic',
        title   => title_for($node, 'Details for'),
        node    => $node,
        template => 'title',
    );
} => 'title' ;

get '/title/:lang'       => [ lang => qr/[a-z]{2}/                     ] => \&get_lang;
get '/title/:lang/:page' => [ lang => qr/[a-z]{2}/, page => qr/[0-9]+/ ] => \&get_lang;

use constant LANG_PAGE_SIZE => 50;

sub get_lang {
    my $self        = shift;
    my $lang        = $self->param('lang');
    my $page        = $self->param('page') // 1;
    my $language    = Locales->new->get_language_from_code($lang);
    my $nodes       = $schema->t->search({ lang => $lang }, { rows => LANG_PAGE_SIZE, page => $page , order_by => \'title'});
    my $url         = "/title/$lang/";


    $self->render(
        layout      => 'basic',
        title       => "Titles in $language language",
        language    => $language,
        nodes       => $nodes,
        pager       => $nodes->pager,
        template    => 'title-lang',
        base_url    => $url,
    );
};

get '/publication/:id' => sub {
    my $self = shift;
    my $node = $schema->p->by_id($self->param('id'));
    $self->render(
        layout  => 'basic',
        title   => title_for($node, 'Publication details for'),
        node    => $node,
        template => 'publication',
    );
} => 'publication';

get '/publisher/:id' => sub  {
    my $self      = shift;
    my $publisher = $schema->resultset('Publisher')->by_id($self->param('id'));
    $self->render(
        layout      => 'basic',
        title       => "Publisher details for " . $publisher->name,
        p           => $publisher,
        template    => 'publisher',
    );
};

get '/asin/:asin' => sub {
    my $self = shift;
    my $node = eval {
        $schema->p->from_asin($self->param('asin'));
    };
    if ($node) {
        $self->render(
            template => 'publication',
            title    => title_for($node),
            node     => $node,
            layout   => 'basic',
        );
    } else {
        $self->render(status => 404, text => 'Book not found');
    }

} => 'asin';

get '/t/:id' => sub {
    my $self = shift;
    my $node = $schema->t->by_id($self->param('id'));
    $self->render(
        layout  => 'basic',
        title   => title_for($node),
        node    => $node,
    );
} => 'tree';

sub search {
    my $self = shift;
    my $keyword = trim $self->param('keyword');
    my $lang    = $self->param('lang') // 'us';
    my ($series, $titles, $publications) = $schema->p->websearch($keyword);
    if (defined $series) {
        $self->render(
            layout   => 'basic',
            title    => "Search results for '$keyword'",
            template => 'search',
            series   => $series,
            titles   => $titles,
            pubs     => $publications,
        );
    } else {
        $self->render(
            layout   => 'basic',
            title    => "No search results for '$keyword'",
            template => 'no_search',
        );
    }
}

get '/author/:id' => sub {
    my $self = shift;
    my $author = $schema->a->by_id($self->param('id'));
    my $title = sprintf 'Author details for %s', $author->name;
    $self->render(
        title    => $title,
        layout   => 'basic',
        author   => $author,
        series   => [$author->series->search],
        singles  => [$author->singles->search],
        template => 'author',
    );
};

get '/logout/' => sub {
    my $self = shift;
    delete $self->session->{logged_in};
    delete $self->session->{user};
    $self->flash(message => 'Logout successful');
    $self->redirect_to('/');
};

my @captcha_qa = qw/one|1 four|2 nine|3 sixteen|4 twenty-five|5 thirty-six|6/;

sub create_captcha {
    my $self = shift;
    my $ca = $captcha_qa[rand @captcha_qa];
    my ($q, $ga) = split /\|/, $ca;
    $self->stash(captcha => "What's the square root of $q?");
    $self->session->{captcha_answer} = sha1($ga . $self->app->secret);
}

sub captcha_correct {
    my $self = shift;
    my $ga   = $self->param('captcha');
    $ga =~ s/\D//g;
    unless ($ga) {
        return;
    }
    my $expected = $self->session->{captcha_answer};
    unless ($expected) {
        return;
    }
    if (sha1($ga . $self->app->secret) eq $expected) {
        return 1;
    }
    return;
}

post '/signup' => sub {
    my $self = shift;
    my $error = sub {
        $self->flash(message => shift);
        $self->redirect_to('/login/');
        return;
    };

    my @missing;
    my %p;
    for (qw/username password password_confirm captcha/) {
        push @missing, $_ unless $self->param($_);
        $p{$_} = $self->param($_);
    }
    if ($p{username}) {
        my ($existing) = $schema->resultset('UserLogin')->search({
                name    => $p{username},
        });
        return $error->("Username '$p{username}' already taken")
            if $existing;
    }
    return $error->('Missing ' . join(', ', @missing)) if @missing;
    return $error->('Password and password confirmation do not match')
        if $p{password} ne $p{password_confirm};
    return $error->('Password too simple') if length($p{password}) < 6;
    return $error->('Spam suspected') if length $p{email};
    return $error->('Captcha incorrect (please write your answer as digit(s))')
        unless captcha_correct($self);

    # wow, finally success!
    delete $self->session->{captcha_answer};
    my $u = $schema->resultset('UserLogin')->create({
            name        => $p{username},
            password    => $p{password},
    });
    if (my $email = $self->param('email')) {
        $u->create_related(info => {
                email   => $email,
        });
    }

    $self->session->{logged_in} = 1;
    $self->session->{user} = $p{username};
    $self->flash(message => 'Account created successfully, welcome to the Quelology!');

    my $goto = delete $self->session->{goto_after_login} // '/';
    $self->redirect_to($goto);

} => 'signup';

post '/login/' => sub {
    my $self     = shift;
    my $username = $self->param('username');
    my $password = $self->param('password');
    my $u        = $schema->resultset('UserLogin')
                   ->authenticate($username, $password);
    if ($u) {
        $self->session(expiration => 4 * 60 * 60);
        $self->session->{logged_in} = 1;
        $self->session->{user}      = $u->name;
        $self->flash(message => 'Login successful, welcome!');
        my $goto = delete $self->session->{goto_after_login} // '/';
        $self->redirect_to($goto);
    } else {
        $self->flash(message => 'Login failed, please try again');
        $self->redirect_to('/login/');
    }
};

get '/imprint' => sub {
    my $self = shift;
    $self->render(
        template => 'imprint',
        title    => 'Legal Details for Quelology',
        layout   => 'basic',
    );
};

get '/about' => sub {
    my $self = shift;
    $self->render(
        template => 'about',
        title    => 'About quelology.org',
        layout   => 'basic',
    );
};


get  '/search/:keyword' => \&search => 'search';
post '/search/'         => \&search;

get  '/help-needed/languages' => sub {
    my $self   = shift;
    my $titles = $schema->t->with_different_languages;
    $self->render(
        title       => 'Titles With Publications in Different Languages',
        titles      => $titles,
        template    => 'help-needed/languages',
        layout      => 'basic',
    );
};

get '/login/' => sub {
    my $self = shift;
    if ($self->session('logged_in')) {
        $self->flash(message => 'You are already logged in.');
        $self->redirect_to('/');
    } else {
        create_captcha($self);
        $self->render(
            template => 'login',
            title    => 'Log in to the Quelology',
            layout   => 'basic',
        );
    }
};

sub render_shelf {
    my $self = shift;
    $self->render(template => 'just-shelf');
}

post '/shelf/delete'=> sub {
    my $self = shift;
    $self->session->{shelf_ids} = [];
    render_shelf($self);
};

post '/shelf/add' => sub {
    my $self = shift;
    unshift @{$self->session->{shelf_ids}}, $self->param('id');
    clean_session($self);
    render_shelf($self);
} => 'shelf/add';

get '/shelf/small' => sub {
    my $self = shift;
    render_shelf($self);
} => 'shelf';

get '/die' => sub { die 'DEBUG'; };


under sub {
    my $self = shift;
    return 1 if $self->session->{logged_in};
    if (!exists $self->session->{goto_after_login}
            && $self->req->url !~ /\blog(in|out)\b/) {
        $self->session->{goto_after_login} = "" . $self->req->url;
    }
    create_captcha($self);
    $self->render(
        message => 'You need to login (or create an account) for this operation',
        template    => 'login',
        title       => 'Permissions denied - please log in',
        layout      => 'basic',
        status      => 403,
    );
    return;
};

get '/edit/:id' => sub {
    my $self = shift;
    my $root = $schema->t ->by_id($self->param('id'));
    $self->render(
        template => 'edit',
        nodes    => [$root->thread_with_drop_points],
        title    => title_for($root, 'Edit'),
        layout   => 'basic',
    );
} => 'edit';

post '/lump/' => sub {
    my $self = shift;
    my @nodes;
    for ($self->param) {
        next unless /^\d+$/;
        push @nodes, $schema->t->by_id($_);
    }
    if (@nodes < 2) {
        $self->flash(message => "Grouping less than two nodes is a no-op");
        $self->redirect_to('/');
        return;
    }
    @nodes = sort { ($a->publish_year // 0) <=> ($b->publish_year // 0) } @nodes;

    my $new_thread = $schema->t->create_root_with_children(
        { title => '<unnamed>' },
        @nodes,
    );
    $self->flash(message => 'Please change the title of the new series, and check the order of items');
    unshift @{$self->session->{shelf_ids}}, $new_thread->id;
    clean_session($self);
    $self->redirect_to('/shelf/connect');
};


post '/update/:what' => sub {
    my $self = shift;
    my $what = $self->param('what');
    my %allowed = (title => 1, author => 1);
    die "Can't change '$what'" unless $allowed{$what};
    die "empty $what" unless $self->param($what);
    my $node = $schema->t->by_id($self->param('id'));
    $node->update({$what => trim $self->param($what)});
    # TODO: return some JSON or HTML or so...
    $self->render(
        template    => 'small_medium',
        n           => $node,
        edit        => 1,
    );
};

post '/recompute/:what' => sub {
    my $self = shift;
    my $what = $self->param('what');
    my %allowed = (publisher => 1, author => 1);
    die "Can't change '$what'" unless $allowed{$what};
    my $id = $self->param('id');
    my $node = $schema->t->by_id($id);
    $node->update({ $what => $node->children->calc_property($what)});
    $self->render(
        template    => 'small_medium',
        n           => $node,
        edit        => 1,
    );
};

post '/create' => sub {
    my $self = shift;
    for (qw/id where/) {
        die "$_ not provided" unless $self->param($_);
    }
    my %d;
    for (qw/title author/) {
        $d{$_} = trim $self->param($_);
    }
    die "No title provided" unless length $d{title};
    my $target = $schema->t->by_id($self->param('id'));
    given ($self->param('where')) {
        when ('before') { $target->create_left_sibling(\%d)  }
        when ('after' ) { $target->create_right_sibling(\%d) }
        when ('below' ) {
            $target->attach_leftmost_child(
                $schema->t->create(\%d)
            );
        }
        default { die "Don't know how to attach in position '$_'" }
    }
    $self->render(
        template => 'edit',
        nodes    => [$target->root->thread_with_drop_points],
    );
};

post '/delete' => sub {
    my $self = shift;
    my $node = $schema->t->by_id($self->param('id'));
    my $root = $node->root;
    $node->take_cutting;
    $self->render(
        template => 'edit',
        nodes    => [$root->thread_with_drop_points],
    );
};

post '/dissolve' => sub {
    my $self = shift;
    my $node = $schema->t->by_id($self->param('id'));
    $node->dissolve();
    $self->render(text => '');
};


$SIG{INT} = sub {
    $schema->storage->disconnect;
    exec $^X, $0, @ARGV;
};

get '/shelf/connect' => sub {
    my $self = shift;
    my %seen;
    my @nodes;
    for my $id (@{ $self->session->{shelf_ids} // [] }) {
        next if $seen{$id};
        push @nodes, [];
        for ($schema->t->by_id($id)->thread_with_drop_points) {
            if (ref($_) eq 'ARRAY') {
                ++$seen{$_->[0]->id};
            }
            push @{$nodes[-1]}, $_;
        }
    }
    $self->render(
        template => 'shelf/connect',
        title    => 'Personal Bookshelf - extend the Quelology',
        nodes    => \@nodes,
    );
};

post '/edit' => sub {
    my $self = shift;
    my ($source_id, $target_id, $where)
            = map $self->param($_), qw/source_id target_id edit_where/;
    my $target = $schema->t->find($target_id);
    die "No target with id $target_id" unless $target;
    my %requires_target = (
        before  => 1,
        after   => 1,
        below   => 1,
        alias   => 1,
    );

    my $source = $schema->t->find($source_id);
    die "No source with id $source_id" if !$source && $requires_target{$where};

#    warn "Moving $source_id $where $target_id\n";

    my $where_to_go = $target;
    push @{$self->session->{shelf_ids}}, $target_id;

    if ($where eq 'alias') {
        $source->add_alias($target);
    } elsif ( $target->is_root && $where ne 'below' ) {
        my @children = $target;
        if ($where eq 'before') {
            unshift @children, $source;
        }
        elsif ($where eq 'after') {
            push @children, $source;
        } else {
            die "Don't know what to do with position '$where' (allowed: before, after, below)";
        }
        $where_to_go = $schema->t->create_root_with_children(
            { title => '<unnamed>' },
            @children,
        );
        unshift @{$self->session->{shelf_ids}}, $where_to_go->id;
        clean_session($self);
    }
    elsif ( $where eq 'after' ) {
        $target->attach_right_sibling($source);
        # remove $source from session
    }
    elsif ( $where eq 'before' ) {
        $target->attach_left_sibling($source);
        # remove $source from session
    }
    elsif ( $where eq 'below' ) {
        $target->attach_leftmost_child($source);
        # remove $source from session
    }
    elsif ($where eq 'delete') {
        $where_to_go = $source->root;
        $source->take_cutting;
    }
    else {
        die "Don't know what to do with position '$where' (allowed: before, after, below, alias, delete)";
    }
    clean_session($self);
    $self->redirect_to('/shelf/connect');
};

app->start;
__DATA__

@@ index.html.ep
% layout 'basic';
<h1><%= $title %></h1>
<p>Want to find a sequel or prequel to a book? Here is the right place!</p>

<p><a href="/about">Learn more about quelology.org</a></p>

<h2>Browse titles by language</h2>
<ul>
% use Locales;
% my $loc = Locales->new();
% for my $lang (@$langs) {
    % my ($l, $c) = map $lang->get_column($_), qw/lang count/;
    <li><a href="/title/<%= $l %>"><%= $loc->get_language_from_code($l) // $l %> (<%= $c %> titles)</a></li>
% } 

</ul>

<h2>Random selection of series</h2>
<ul class="series">
<% for my $n (@$threads) { %>
    <li>
    %== include small_medium_noimg => n => $n
    </li>
<% } %>
</ul>
<h2>Random selection of single titles</h2>
<ul>
<% for my $n (@$singles) { %>
    <li>
    <%== include small_medium_noimg => n => $n %>
    </li>
<% } %>
</ul>

@@ single_author.html.ep
<a href="/author/<%= $author->id %>" class="author"><%= $author->name %></a><%= '' =%>

@@ authors.html.ep
% if ($for && (my @a = $for->authors)) {
    % if (@a == 1) {
        <%== include 'single_author', author => $a[0] =%>
    % } else {
        % my $last = pop @a;
        % my $sl   = pop @a;
        % for (@a) {
            <%== include 'single_author', author => $_ =%>,
        %}
        <%== include 'single_author', author => $sl %> and
        <%== include 'single_author', author => $last %>
    % }
%} else {
    (no authors known)
% }

@@ add_shelf_link.html.ep
<span class="add_to_shelf"><a href="#" onclick="add_id_to_shelf(<%= $node->id %>); return false">Add to your book shelf</a></span>

@@ shelf/connect.html.ep
% layout 'basic';
<h1>Personal Book Shelf - Contribute to the Quelology</h1>
<p>Use drag and drop!</p>
% for my $n (@$nodes) {
    % my $first_node = $n->[1][0];
    <h2 id="title_<%= $first_node->id %>"><%= $first_node->title %></h2>
    <p>by <%== include authors => for =>  $first_node %></p>
    <%== include 'drop_tree', nodes => $n %>
% }
%== include html_only_edit => nodes => $nodes;

@@ attribution_link.html.ep
% if ($a ->url) {
    <a href="<%= $a->url %>" class="attribution"><%= $a->name %></a>
% } else {
    <%= $a->name %>
% }
(retrieved on <%= $a->retrieved %>)

@@ attributions.html.ep
% my $attr = $for->attributions;
% my $c    = $attr->count;
% if ($c) {
    <p class="attribution"><%= $type %> data kindly provided by
    % if ($c == 1) {
        %== include 'attribution_link', a => $attr->first
        </p>
    % } else {
        </p>
        <ul class="attribution">
        % while (my $i = $attr->next) {
            <li><%== include 'attribution_link', a => $i %></li>
        %}
        </ul>
    % }
% }

@@ author.html.ep
<h1><%= $author->name %></h1>
<table>
    % my @keys = qw/name legal_name birthplace birthdate deathdate/;
    % my @names = ('Name', 'Legal name', 'Birth place', 'Birth date', 'Death date');
    % for my $i (0..$#keys) {
        % my $k = $keys[$i];
        % if (defined $author->$k) {
            <tr>
                <td>        <%= $names[$i]  %>         </td>
                <td><strong><%= $author->$k %></strong></td>
            </tr>
        % }
    % }
</table>
%== include links => links => [$author->links]
%== include 'attributions', for => $author, type => 'Author'
% if (@$series) {
    <h2>Series by <%= $author->name %></h2>
    % for (@$series) {
        %== include 'tree-part', node => $_, surpress_author => $_->single_author
        <br />
    % }
% }
% if (@$singles) {
    <h2>Single titles by <%= $author->name %></h2>
    <ul>
    % for (@$singles) {
        <li>
        %== include 'small_medium_noimg', n => $_, surpress_author => ($_->authors->count == 1)
        </li>
    % }
    </ul>
% }


@@ links.html.ep
% if (@$links) {
    <h3>Links</h3>
    <ul>
        % for my $l (@$links) {
            <li><a href="<%= $l->url %>"><%= $l->type %></a></li>
        % }
    </ul>
% }

@@ tree.html.ep
<h1 class="medium"><%= $node->title %></h1>
<p>by <%== include authors => for => $node %>
</p>
<p><a href="/edit/<%= $node->id %>">Edit this series</a></p>
% if ($node->id != $node->root_id) {
    <p>This is part of a <a href="/t/<%= $node->root_id %>">series
    <strong>(<%= $node->title %>)</strong></a></p>
% }
<p>
%== include add_shelf_link => (node => $node)
</p>
%== include 'tree-part', node => $node, surpress_author => $node->single_author

%== include 'attributions', for => $node, type => "Series"

@@ tree-part.html.ep
%= include 'small_medium_noimg', n => $node
<ul>
<% my $prev_level = 1;
   for my $n ($node->descendants) {
      my $l = $n->level - $prev_level;
      $prev_level = $n->level;
      my $ld = '';
      if ($l > 0) {
        $ld = '<ul>' x $l;
      } elsif ($l < 0) {
        $ld = '</ul>' x abs($l);
      }
    %>
        <%== $ld =%>
    <li>
        %== include 'small_medium_noimg', n => $n, surpress_author => stash('surpress_author')
    </li>
<% } =%>
<%== '</ul>' x $prev_level =%>

@@ edit_form.html.ep
<form id="edit_form" name="edit_form" method="post" action="/edit">
    <input type="hidden" id="source_id" name="source_id">
    <input type="hidden" id="target_id" name="target_id">
    <input type="hidden" id="edit_where" name="edit_where">
</form>

@@ edit.html.ep
<%
    my $first_node = $nodes->[1][0];
%>
<div class="whole_tree" data-id="<%= $first_node->id %>">
  <h1 class="root_title" id="title_<%= $first_node->id %>"><%= $first_node->title %></h1>
  <p>by <span class="root_made_by"><%== include authors => for => $first_node %></span>,
  published by <span class="root_publisher"><%= $first_node->publisher; %></span>.
  <a href="#" onclick="dissolve_tree(<%= $first_node->id %>); false">
    <img src="/image/dissolve.png" alt="" width="16" height="16" />
    Dissolve this series
  </a>
  </p>
  <%== include 'drop_tree', nodes => $nodes %>
</div>

@@ drop_tree.html.ep
<ul>
<%
    my $prev_level = 1;
    for my $n (@$nodes) {
        my $current_level;
        if (UNIVERSAL::isa($n, 'Quelology::Model::DropPoint')) {
            $current_level =  $n->level;
        } else {
            $current_level = $n->[0]->level;
        }
        my $l = $current_level - $prev_level;
        my $ld = '';
        if ($l > 0) {
            $ld = '<ul>' x $l;
        } elsif ($l < 0) {
            $ld = '</ul>' x abs($l);
        }
    %>
        %== $ld
   <li>
        <% if (UNIVERSAL::isa($n, 'Quelology::Model::DropPoint')) { %>
            <%= include 'drop_point', d => $n =%>
        <% } else { %>
            <%= include 'small_medium', n => $n->[0], edit => 1 =%>
            <% if ($n->[1]) { %>
                <%= include 'drop_point', d => $n->[1] =%>
            <% } %>
        <% } %>
    </li>
%   $prev_level = $current_level;
% }
%== '</ul>' x $prev_level;
%# == include html_only_edit => nodes => $nodes;

@@ html_only_edit.html.ep
% use Data::Dumper;
% my @ns = extract_nodes $nodes;
% my $mc = @ns;
% $mc    = 20 if $mc > 20;
<form action="/edit" method="post">
<p>
    Take
    <br />
    <select name="source_id" size="<%= $mc %>">
        % for (@ns) {
            <option value="<%= $_->id %>"><%= $_->title %></option> 
        % }
    </select>
    <br />
    and 
    <br />
    <select name="edit_where" size="5">
        <option value="before">move it before</option>
        <option value="below">move it below</option>
        <option value="after">move it after</option>
        <option value="delete">remove it (ignore second book)</option>
        <option value="alias">mark it as an alias or translation for</option>
    </select>
    <br />
    <select name="target_id" size="<%= $mc %>">
        % for (@ns) {
            <option value="<%= $_->id %>"><%= $_->title %></option> 
        % }
    </select>
    <br />
    <input type="submit" value="Do it now" />
</p>
</form>

@@ semantic_attrs.html.ep
id="<%= $what %>_<%= $id %>" data-id="<%= $id %>" data-what="<%= $what %>"

@@ title_link.html.ep
% if (stash('single')) {
    <a href="/title/<%= $title->id %>" class="data_title"><%= $title->title %></a>
% } else {
    <a href="/t/<%= $title->id %>" class="data_title"><%= $title->title %></a>
% }

@@ title.html.ep
<div class="title node draggable" <%== include semantic_attrs => (id => $node->id, what => 'title') %> >
    <h2><%= $node->title %></h2>
    <p>By <%== include authors => for => $node %></p>

    <table>
        % my %h = (date => 'initial publication', language => 'Language',);
        % for my $k (sort {$h{$a} cmp $h{$b}} keys %h) {
            % if (defined $node->$k) {
                <tr>
                    <td>        <%= $h{$k}    %>         </td>
                    <td><strong><%= $node->$k %></strong></td>
                </tr>
            % }
        % }
    </table>
    % if ($node->id != $node->root_id) {
        <p>This is part of a <a href="/t/<%= $node->root_id %>">series
        <strong>(<%= $node->root->title %>)</strong></a></p>
    % }

    % my $t = $node->translations;
    % if ($t->count) {
        <div class="translations">
            <h3>Translations</h3>
            <ul>
                % while (my $n = $t->next) {
                    <li>
                        <span class="language"><%= $n->language %>:</span>
                        %== include 'title_link', title => $n
                    </li>
                % }
            </ul>
            <br />
        </div>
    % }

    %== include 'attributions', for => $node, type => "Title"

    <h3>Publications</h3>
    % for my $p ($node->publications) {
        %== include 'publication', node => $p
        <br style="clear:left" />
    % }
    </ul>
</div>

@@ title-lang.html.ep
<h1><%= $title %></h1>
%== include 'pager', pager => $pager
<ul>
  % while (my $t = $nodes->next) {
    <li>
    %== include title_link => title => $t
    by <%== include authors => for => $t %></li>
  % }
</ul>
%== include 'pager', pager => $pager

@@ pager.html.ep
% unless ($pager->first_page == $pager->last_page) {
  <div class="pager">
    Result pages:
    <ul class="pager">
      % for ($pager->first_page .. $pager->last_page) {
        <li><a href="<%= $base_url . $_ %>">
          <%== $_ == $pager->current_page ? "<strong>«$_»</strong>" : $_ =%>
        </li>
      % }
    </ul>
  </div>
% }

@@ robotstxt_prod.txt.ep
User-agent: *
Allow: /

@@ robotstxt_dev.txt.ep
User-agent: *
Disallow: /

@@ publication.html.ep
<div  id="pub_<%= $node->id %>" data-id="<%= $node->id %>">
<h4><%= $node->title %></h4>
% if (defined $node->medium_image) {
  <p style="float:left">
    <% if (defined $node->large_image) { %>
        <a href="<%= $node->large_image %>">
    <% } %>
    <img src="<%= $node->medium_image %>" class="medium_large"
            alt="Cover of <%= $node->title %>" />
    <% if (defined $node->large_image) { %>
        </a>
    <% } %>
  </p>
% }

<table>
    % my @keys = qw/isbn publication_date language/;
    % my @names = ('ISBN', 'Date', 'Language');
    % for (0..$#keys) {
        % my $k = $keys[$_];
        % if (defined $node->$k) {
            <tr>
                <td>        <%= $names[$_] =%>         </td>
                <td><strong><%= $node->$k   %></strong></td>
            </tr>
        % }
    % }
    % if (my $publisher = $node->publisher) {
        <tr>
            <td>Publisher</td>
            <td><a href="/publisher/<%= $publisher->id %>"><%= $publisher->name %></td>
        </tr>
    % }
</table>
%== include add_shelf_link => (node => $node);

     <p>
         <a href="<%= $node->amazon_url %>">
             View on amazon US
         </a>
     </p>

     %== include 'attributions', for => $node, type => "Publication"
</div>

@@ publisher.html.ep
<h1><%= $p->name %></h1>
%== include links => links => [$p->links]
% my $pubs = $p->publications_by_date;
% if ($pubs->count) {
    <h2 id="publications_by">Publications by <%= $p->name %></h2>
    <dl>
        % my $prev_year = 0;
        % my $year_from_date = sub {
        %   return 0 unless $_[0];
        %   (split '-', $_[0], 2)[0];
        % };
        % while (my $pub = $pubs->next ) {
            % if ($year_from_date->($pub->year) != $prev_year) {
                % $prev_year = $year_from_date->($pub->year);
                </ul></dd><dt><%= $prev_year || '(date unknown)' %></dt>
                <dd><ul>
            % }
                    <li><a href="/publication/<%= $pub->id %>"><%= $pub->title %></li></li>
        % }
        </ul></dd>
    </dl>
% }


@@ small_medium_noimg.html.ep
<span id="medium_<%= $n->id %>" class="medium" data-id="<%= $n->id %>">
    %== include title_link => title => $n
    % unless (stash('surpress_author')) {
        by
        <span class="data_made_by">
            %== include authors => for => $n
        </span>
    % }
    (id <%= $n->id %>)
</span>

@@ small_medium.html.ep
<span id="medium_<%= $n->id %>" class="medium" data-treeposition="<%= $n->tree_position %>"
    data-id="<%= $n->id %>">
    <% if ($n->small_image) { %>
        <img src="<%= $n->small_image %>" alt="" class="medium_img" />
    <% } %>

    <span class="data_title">
    <a href="/details/<%= $n->id %>"><%= $n->title %></a>
    %== include 'edit_marker' => edit => stash('edit'), what => 'title', name => 'title'
    </span>
    by
    <span class="data_made_by">
        <%== include authors => for =>  $first_node %>
        %== include 'edit_marker' => edit => stash('edit'), what => 'author', name => 'author'
        % if (stash('edit') && $n->has_leaves) {
            <a href="#" onclick="recompute_medium('author', <%= $n->id %>); return false">
                <img src="/image/recompute.png" width="16" height="16"
                    alt="recompute author" title="recompute author" />
            </a>
        %}
    </span>
    (id <%= $n->id %>)
    %== include  'delete_marker', edit => stash('edit')
</span>

@@ edit_marker.html.ep
<% if (stash 'edit') { %>
    <a href="#" onclick="update_medium(<%= $n->id %>, '<%= $what %>'); return false">
        <img src="/image/edit.png" alt="(edit <%= $name %>)" title="edit <%= $name %>"
            width="16" height="16" />
    </a>
<% } %>

@@ delete_marker.html.ep
% if (stash 'edit') {
   <a href="#" onclick="delete_medium(<%= $n->id %>); return false">
       <img src="/image/delete.png" alt="remove from series"
            title="remove from series" width="16" height="16" />
   </a>
% }

@@ drop_point.html.ep
<a href="#" onclick="create_medium(<%= $d->id %>, '<%= $d->where %>'); return false">
<img
    src="/image/drop-target-small.png" width="16" height="16"
    id="drop_<%= $d->where %>_<%= $d->id %>" class="drop droppable"
    data-id="<%= $d->id %>" data-where="<%= $d->where %>"
    alt="Drag a book with your mouse and drop it here to insert it here; click here to create a new book or series in this position"
/>
</a>

@@ just-shelf.html.ep
%== shelf

@@ small-shelf.html.ep
<div id="shelf">
    % if (@$items) {
        <ul>
    %   for my $i (@$items) {
            <li class="draggable" id="shelfmedium_<%= $i->id %>" data-id="<%= $i->id %>">
            <a href="/t/<%= $i->id%>" title="<%= $i->title %>"><%= $i->short_title %></a>
            </li>
    %   }
        </ul>
    % } else {
        <p id="placeholder">Personal book shelf - drag books here to group them.</p>
    %}
    <ul class="nav">
        <li><a href="/shelf/connect">Connect books on your shelf</a></li>
        <li><a href="#" onclick="clear_shelf()" style="clear: left">Clear bookshelf</a></li>
    </ul>
</div>

@@ no_search.html.ep
<h2>Sorry, no search results</h2>
<p>Your search did not produce any results. Please try it again with less
specific terms, or with a different language.</p>

@@ search.html.ep
% if (@$series) {
    <h2>Series</h2>
    <ul>
        % for (@$series) {
            <li>
                %== include 'tree-part', node => $_
            </li>
        % }
    </ul>
% }
% if (@$titles) {
    <h2>Single Books</h2>
    <form action="/lump/" method="post">
    <ul>
        % for (@$titles) {
            <li>
                % if (session 'logged_in') {
                    <input type="checkbox" name="<%= $_->id %>" />
                % }
                <%= include small_medium  => (n => $_, edit => 0) %>
                <%= include 'add_shelf_link', node => $_ =%>
            </li>
        % }
    </ul>
    % if (session 'logged_in') {
        <input type="submit" value="Group together" />
    % }
    </form>
% }
% if (!@$series && !@$titles && !@$pubs) {
    <p>No search results, please try it with different search terms.</p>
% }

@@ help-needed/languages.html.ep
<h1><%= $title %></h1>
<p>
    A title should only have publications in the same language as itself.
    If a title is translated into another language, a title in that second
    language should be created (how?), marked as a translation of the existing
    title, and the publications in the new language should be moved to the new
    title (how?).
</p>
<p>
    Here is a list of titles that have publications in other languages:
</p>
<ul>
  % while (my $t = $titles->next) {
    <li><%= $t->lang %>, <%== include title_link => title => $t %>
        <ul>
            % for (sort {$a->lang cmp $b->lang } $t->publications) {
                <li>
                    <%= $_->lang %>, <%= $_->title %>
                </li>
            % }
        </ul>
    </li>
  % }

</ul>
